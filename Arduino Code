#include <LiquidCrystal.h>

#define LCD_RS_PIN A5 
#define LCD_E_PIN A4
#define LCD_D4_PIN 6
#define LCD_D5_PIN 7
#define LCD_D6_PIN 8
#define LCD_D7_PIN 9

#define ECHO_PIN 3
#define TRIGGER_PIN 4

LiquidCrystal lcd(LCD_RS_PIN, LCD_E_PIN, LCD_D4_PIN,
                  LCD_D5_PIN, LCD_D6_PIN, LCD_D7_PIN);

unsigned long lastTimeUltrasonicTrigger = millis();
unsigned long ultrasonicTriggerDelay = 100;

volatile unsigned long pulseInTimeBegin;
volatile unsigned long pulseInTimeEnd;
volatile bool newDistanceAvailable = false;

double previousDistance = 50; 

void triggerUltrasonicSensor(){
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
}
double getUltrasonicDistance()
{
  unsigned long durationStart = millis();
  double durationMicroseconds = pulseInTimeEnd - pulseInTimeBegin;
  unsigned long durationEnd = millis();
  double distance = durationMicroseconds / 58.0; //cm
  unsigned long durationCode = durationEnd-durationStart;

  return distance; 
  //distance = duration * speed
  //340 m/s --> 0.034 cm/us
  //duration * (0.034/2)  
}

void echoPinInterrupt()
{
  if(digitalRead(ECHO_PIN) == HIGH){
    //rising
    pulseInTimeBegin = micros();
  }
  else{
    //falling
    pulseInTimeEnd = micros();
    newDistanceAvailable = true; 
  }
}
void setup() {
  Serial.begin(115200);
  pinMode(ECHO_PIN, INPUT);
  pinMode(TRIGGER_PIN, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(ECHO_PIN),
                  echoPinInterrupt,
                  CHANGE);
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("rate: ");
  lcd.print(ultrasonicTriggerDelay);
  lcd.print(" ms");
}

void loop() {
  unsigned long timeNow = millis();
  if(timeNow - lastTimeUltrasonicTrigger > ultrasonicTriggerDelay)
  {
    lastTimeUltrasonicTrigger += ultrasonicTriggerDelay;
    triggerUltrasonicSensor();
  }
  if(newDistanceAvailable){
    newDistanceAvailable = false;
    double distance = getUltrasonicDistance();
    if(distance > 400){
      distance = previousDistance;
    }
    distance = 0.7 * previousDistance + 0.3 * distance; 
    Serial.println(distance);
    previousDistance = distance;
    lcd.setCursor(0, 1);
    lcd.print("Distance:");
    lcd.print(round(distance));
    lcd.print("cm   ");
    // delay(1000);
  }

  
}
